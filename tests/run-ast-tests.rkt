#lang racket

#|
|#

(require (relative-in magnolisp
                      "ast-magnolisp.rkt" "ast-repr.rkt")
         racket/generic rackunit)

(let ((ast (annoless Var (fresh-Id))))
  (check-true (Var? ast))
  (check-true (Ast? ast))
  (check-true (Id? (Var-id ast)))
  (check-true (hash? (Ast-annos ast)))
  (check-true (Ast? (set-Ast-annos ast #hasheq())))
  (check-false (Expr-type ast))
  (let ((a (Ast-annos ast)))
    (check-eq? a (Ast-annos (set-Ast-annos ast a))))
  (let ((a #hasheq((foo . bar))))
    (check-eq? a (Ast-annos (set-Ast-annos ast a)))
    (check-eq? a (Ast-annos (Ast-copy ast a)))))

(let ((ast (annoless Param (fresh-Id)
                     (annoless NameT (fresh-Id 't)))))
  (check-true (Param? ast))
  (check-true (Def? ast))
  (check-true (Ast? ast))
  (check-true (Id? (Def-id ast)))
  (let* ((id (fresh-Id))
         (n-ast (set-Def-id ast id)))
    (check-pred Param? n-ast)
    (check-pred Id? (Def-id n-ast))
    (check-not-eq? (Def-id ast) (Def-id n-ast)))
  (let* ((id (fresh-Id))
         (n-ast (Def-copy ast id)))
    (check-pred Param? n-ast)
    (check-pred Id? (Def-id n-ast))
    (check-not-eq? (Def-id ast) (Def-id n-ast))))

(let ((ast the-AnyT))
  (check-pred AnyT? ast)
  (check-pred Ast? ast)
  (check-pred hash? (AnyT-annos ast))
  (check-pred hash? (Ast-annos ast))
  (check-not-eq? ast (Ast-copy ast #hasheq()))
  (check-equal? ast (Ast-copy ast #hasheq((foo . bar))))
  (check-not-exn (thunk (set-Ast-annos ast #hasheq())))
  (check-not-exn (thunk (Ast-copy ast #hasheq()))))

(let ()
  (define-ast SomeT (Ast Type)
    ((#:none annos) (#:just t)))
  (define ast (annoless SomeT the-AnyT))
  (check-pred Ast? ast)
  (check-pred SomeT? ast)
  (check-pred AnyT? (SomeT-t ast))
  (check-pred hash? (SomeT-annos ast))
  (check-pred hash? (Ast-annos ast))
  (check-not-eq? ast (Ast-copy ast #hasheq()))
  (check-equal? ast (Ast-copy ast #hasheq((foo . bar))))
  (check-not-exn (thunk (set-Ast-annos ast #hasheq())))
  (check-not-exn (thunk (Ast-copy ast #hasheq())))
  (check-equal? (SomeT-copy ast #hasheq((foo . bar)) the-AnyT) ast))

(let ()
  (define-ast SomeDef (Def) ((#:just id)))
  (define x (fresh-Id 'x))
  (define ast (SomeDef x))
  (check-pred SomeDef? ast)
  (check-pred Def? ast)
  (check-equal? ast (SomeDef-copy ast x))
  (check-equal? ast (Def-copy ast x))
  (check-equal? (Def-id ast) x)
  (check-equal? ast (set-Def-id ast (Def-id ast))))
